package com.example.submission.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.submission.database.Favorite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITE".
*/
public class FavoriteDao extends AbstractDao<Favorite, Long> {

    public static final String TABLENAME = "FAVORITE";

    /**
     * Properties of entity Favorite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Login = new Property(1, String.class, "login", false, "LOGIN");
        public final static Property Node_id = new Property(2, String.class, "node_id", false, "NODE_ID");
        public final static Property Avatar_url = new Property(3, String.class, "avatar_url", false, "AVATAR_URL");
        public final static Property Gravatar_id = new Property(4, String.class, "gravatar_id", false, "GRAVATAR_ID");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property Html_url = new Property(6, String.class, "html_url", false, "HTML_URL");
        public final static Property Followers_url = new Property(7, String.class, "followers_url", false, "FOLLOWERS_URL");
        public final static Property Following_url = new Property(8, String.class, "following_url", false, "FOLLOWING_URL");
        public final static Property Gists_url = new Property(9, String.class, "gists_url", false, "GISTS_URL");
        public final static Property Starred_url = new Property(10, String.class, "starred_url", false, "STARRED_URL");
        public final static Property Subscriptions_url = new Property(11, String.class, "subscriptions_url", false, "SUBSCRIPTIONS_URL");
        public final static Property Organizations_url = new Property(12, String.class, "organizations_url", false, "ORGANIZATIONS_URL");
        public final static Property Repos_url = new Property(13, String.class, "repos_url", false, "REPOS_URL");
        public final static Property Events_url = new Property(14, String.class, "events_url", false, "EVENTS_URL");
        public final static Property Received_events_url = new Property(15, String.class, "received_events_url", false, "RECEIVED_EVENTS_URL");
        public final static Property Type = new Property(16, String.class, "type", false, "TYPE");
        public final static Property Site_admin = new Property(17, Boolean.class, "site_admin", false, "SITE_ADMIN");
        public final static Property Name = new Property(18, String.class, "name", false, "NAME");
        public final static Property Company = new Property(19, String.class, "company", false, "COMPANY");
        public final static Property Blog = new Property(20, String.class, "blog", false, "BLOG");
        public final static Property Location = new Property(21, String.class, "location", false, "LOCATION");
        public final static Property Email = new Property(22, String.class, "email", false, "EMAIL");
        public final static Property Hireable = new Property(23, String.class, "hireable", false, "HIREABLE");
        public final static Property Bio = new Property(24, String.class, "bio", false, "BIO");
        public final static Property Twitter_username = new Property(25, String.class, "twitter_username", false, "TWITTER_USERNAME");
        public final static Property Public_repos = new Property(26, Integer.class, "public_repos", false, "PUBLIC_REPOS");
        public final static Property Public_gists = new Property(27, Integer.class, "public_gists", false, "PUBLIC_GISTS");
        public final static Property Followers = new Property(28, Integer.class, "followers", false, "FOLLOWERS");
        public final static Property Following = new Property(29, Integer.class, "following", false, "FOLLOWING");
        public final static Property Created_at = new Property(30, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(31, String.class, "updated_at", false, "UPDATED_AT");
    };


    public FavoriteDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LOGIN\" TEXT," + // 1: login
                "\"NODE_ID\" TEXT," + // 2: node_id
                "\"AVATAR_URL\" TEXT," + // 3: avatar_url
                "\"GRAVATAR_ID\" TEXT," + // 4: gravatar_id
                "\"URL\" TEXT," + // 5: url
                "\"HTML_URL\" TEXT," + // 6: html_url
                "\"FOLLOWERS_URL\" TEXT," + // 7: followers_url
                "\"FOLLOWING_URL\" TEXT," + // 8: following_url
                "\"GISTS_URL\" TEXT," + // 9: gists_url
                "\"STARRED_URL\" TEXT," + // 10: starred_url
                "\"SUBSCRIPTIONS_URL\" TEXT," + // 11: subscriptions_url
                "\"ORGANIZATIONS_URL\" TEXT," + // 12: organizations_url
                "\"REPOS_URL\" TEXT," + // 13: repos_url
                "\"EVENTS_URL\" TEXT," + // 14: events_url
                "\"RECEIVED_EVENTS_URL\" TEXT," + // 15: received_events_url
                "\"TYPE\" TEXT," + // 16: type
                "\"SITE_ADMIN\" INTEGER," + // 17: site_admin
                "\"NAME\" TEXT," + // 18: name
                "\"COMPANY\" TEXT," + // 19: company
                "\"BLOG\" TEXT," + // 20: blog
                "\"LOCATION\" TEXT," + // 21: location
                "\"EMAIL\" TEXT," + // 22: email
                "\"HIREABLE\" TEXT," + // 23: hireable
                "\"BIO\" TEXT," + // 24: bio
                "\"TWITTER_USERNAME\" TEXT," + // 25: twitter_username
                "\"PUBLIC_REPOS\" INTEGER," + // 26: public_repos
                "\"PUBLIC_GISTS\" INTEGER," + // 27: public_gists
                "\"FOLLOWERS\" INTEGER," + // 28: followers
                "\"FOLLOWING\" INTEGER," + // 29: following
                "\"CREATED_AT\" TEXT," + // 30: created_at
                "\"UPDATED_AT\" TEXT);"); // 31: updated_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Favorite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(2, login);
        }
 
        String node_id = entity.getNode_id();
        if (node_id != null) {
            stmt.bindString(3, node_id);
        }
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(4, avatar_url);
        }
 
        String gravatar_id = entity.getGravatar_id();
        if (gravatar_id != null) {
            stmt.bindString(5, gravatar_id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String html_url = entity.getHtml_url();
        if (html_url != null) {
            stmt.bindString(7, html_url);
        }
 
        String followers_url = entity.getFollowers_url();
        if (followers_url != null) {
            stmt.bindString(8, followers_url);
        }
 
        String following_url = entity.getFollowing_url();
        if (following_url != null) {
            stmt.bindString(9, following_url);
        }
 
        String gists_url = entity.getGists_url();
        if (gists_url != null) {
            stmt.bindString(10, gists_url);
        }
 
        String starred_url = entity.getStarred_url();
        if (starred_url != null) {
            stmt.bindString(11, starred_url);
        }
 
        String subscriptions_url = entity.getSubscriptions_url();
        if (subscriptions_url != null) {
            stmt.bindString(12, subscriptions_url);
        }
 
        String organizations_url = entity.getOrganizations_url();
        if (organizations_url != null) {
            stmt.bindString(13, organizations_url);
        }
 
        String repos_url = entity.getRepos_url();
        if (repos_url != null) {
            stmt.bindString(14, repos_url);
        }
 
        String events_url = entity.getEvents_url();
        if (events_url != null) {
            stmt.bindString(15, events_url);
        }
 
        String received_events_url = entity.getReceived_events_url();
        if (received_events_url != null) {
            stmt.bindString(16, received_events_url);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(17, type);
        }
 
        Boolean site_admin = entity.getSite_admin();
        if (site_admin != null) {
            stmt.bindLong(18, site_admin ? 1L: 0L);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(19, name);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(20, company);
        }
 
        String blog = entity.getBlog();
        if (blog != null) {
            stmt.bindString(21, blog);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(22, location);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(23, email);
        }
 
        String hireable = entity.getHireable();
        if (hireable != null) {
            stmt.bindString(24, hireable);
        }
 
        String bio = entity.getBio();
        if (bio != null) {
            stmt.bindString(25, bio);
        }
 
        String twitter_username = entity.getTwitter_username();
        if (twitter_username != null) {
            stmt.bindString(26, twitter_username);
        }
 
        Integer public_repos = entity.getPublic_repos();
        if (public_repos != null) {
            stmt.bindLong(27, public_repos);
        }
 
        Integer public_gists = entity.getPublic_gists();
        if (public_gists != null) {
            stmt.bindLong(28, public_gists);
        }
 
        Integer followers = entity.getFollowers();
        if (followers != null) {
            stmt.bindLong(29, followers);
        }
 
        Integer following = entity.getFollowing();
        if (following != null) {
            stmt.bindLong(30, following);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(31, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(32, updated_at);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Favorite readEntity(Cursor cursor, int offset) {
        Favorite entity = new Favorite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // login
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // node_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gravatar_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // html_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // followers_url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // following_url
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gists_url
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // starred_url
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // subscriptions_url
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // organizations_url
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // repos_url
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // events_url
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // received_events_url
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // type
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // site_admin
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // name
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // company
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // blog
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // location
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // email
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // hireable
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // bio
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // twitter_username
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // public_repos
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // public_gists
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // followers
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // following
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // created_at
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31) // updated_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Favorite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLogin(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNode_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGravatar_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHtml_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFollowers_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFollowing_url(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGists_url(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStarred_url(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSubscriptions_url(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOrganizations_url(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRepos_url(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEvents_url(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReceived_events_url(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSite_admin(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCompany(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBlog(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setLocation(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setEmail(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setHireable(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setBio(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTwitter_username(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPublic_repos(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setPublic_gists(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setFollowers(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setFollowing(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setCreated_at(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setUpdated_at(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Favorite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Favorite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
